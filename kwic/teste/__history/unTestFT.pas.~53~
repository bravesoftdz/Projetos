{##############################################################################}
{# NexusDB Fulltext Index example: unTestFT.pas 3.51                          #}
{# Copyright (c) NexusDB Pty. Ltd. 2003-2014                                  #}
{# All rights reserved.                                                       #}
{##############################################################################}
{# NexusDB Fulltext Index example: Form File                                  #}
{##############################################################################}

{$I nxDefine.inc}

unit unTestFT;

interface

uses
  {$IFDEF NXWINAPI}nxWinAPI{$ELSE}Windows{$ENDIF},
  Messages,
  SysUtils,
  {Variants,}
  Classes,
  Graphics,
  Controls,
  Forms,
  Dialogs,
  Grids,
  DBGrids,
  DB,
  nxdb,
  nxsrSqlEngineBase,
  nxsqlEngine,
  nxllComponent,
  nxsdServerEngine,
  nxsrServerEngine,
  StdCtrls,
  nxseAllEngines,
  nxllTypes,
  ExtCtrls,
  DBCtrls;

type
  TForm1 = class(TForm)
    nxServerEngine1: TnxServerEngine;
    nxSqlEngine1: TnxSqlEngine;
    nxSession1: TnxSession;
    nxDatabase1: TnxDatabase;
    nxTable1: TnxTable;
    DataSource1: TDataSource;
    DBGrid1: TDBGrid;
    bnCreate: TButton;
    nxQuery1: TnxQuery;
    DBMemo1: TDBMemo;
    DBGrid2: TDBGrid;
    nxTable2: TnxTable;
    DataSource2: TDataSource;
    DBNavigator1: TDBNavigator;
    DBNavigator2: TDBNavigator;
    Button1: TButton;
    bnLoadMemo: TButton;
    OpenDialog1: TOpenDialog;
    Edit2: TEdit;
    Button3: TButton;
    Edit3: TEdit;
    btnClearRange: TButton;
    Label1: TLabel;
    procedure bnCreateClick(Sender: TObject);
    procedure bnOpenClick(Sender: TObject);
    procedure bnQueryClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure nxTable1AfterPost(DataSet: TDataSet);
    procedure nxTable2AfterPost(DataSet: TDataSet);
    procedure bnLoadMemoClick(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure btnClearRangeClick(Sender: TObject);
  private
    ImportS: string;
    AttributeS: string;
  protected
    ImportLevel: integer;
  public
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

uses
  nxsdTypes,
  nxsdDataDictionary,
  nxsdDataDictionaryFulltext,
  kwicDescriptor;

procedure TForm1.bnCreateClick(Sender: TObject);
var
  Dict : TnxDataDictionary;
  s    : string;
  sl   : TStringList;
begin
  nxDatabase1.Close;
  nxDatabase1.Open;

  Dict := TnxDataDictionary.Create;
  try
    Dict.AddLocaleDescriptor;

    Dict.FieldsDescriptor.AddField('ID', '', nxtAutoInc, 0, 0, False);
    Dict.FieldsDescriptor.AddField('Text', '', nxtWideString, 100, 0, False);
    Dict.FieldsDescriptor.AddField('Memo', '', nxtBlobWideMemo, 0, 0, False);
    with Dict.EnsureIndicesDescriptor.AddIndex('byID', 0, False, '', TnxCompKeyDescriptor),
      (KeyDescriptor as TnxCompKeyDescriptor) do
      Add(0);

    with Dict.IndicesDescriptor.AddIndex('byToken', 0, True, '', TnxMainIndexTokenKeyDescriptor) do begin
      with (KeyDescriptor as TnxMainIndexTokenKeyDescriptor) do
        MaxTokenSize := 50;  // set max key length here
    end;
    with EnsureFulltextDescriptor(Dict) do begin
      with AddFullTextIndex('StringWords', nil, 1) do begin
        AddFieldTokenExtractor(Dict.FieldsDescriptor.GetFieldFromName('Text), 'StringWords1', TnxKwicTokenExtractorDescriptor);
        AddFieldTokenExtractor(Dict.FieldsDescriptor.getFieldFromName('Memo'), 'StringWords2', TnxKwicTokenExtractorDescriptor);
        with TnxMainIndexTokenIndexDescriptor(AddTokenIndex('StringWords', TnxMainIndexTokenIndexDescriptor)) do begin
          MainIndexNumber := 2;
        end;
      end;
    end;

    nxDatabase1.CreateTable(True, '<Table>', '', Dict, tsPersistent);
  finally
    FreeAndNil(Dict);
  end;

  nxTable1.Options := [dsoAddKeyAsVariantField];
  nxTable1.Open;
  nxTable1.Append;
  with nxTable1 do begin
    sl := TStringList.Create;
    try
      sl.LoadFromFile('unTestFT.pas');
      s := sl.Text;
      FieldByName('memo').AsWideString := s;
    finally
      sl.Free;
    end;
  end;
  nxTable1.Post;

  nxTable2.Options := [dsoAddKeyAsVariantField];
  nxTable2.IndexName := 'byToken'; {!!rbl}
  nxTable2.Open;
end;

procedure TForm1.bnOpenClick(Sender: TObject);
begin
  nxTable1.Open;
end;

procedure TForm1.bnQueryClick(Sender: TObject);
begin
  nxQuery1.Open;
end;

procedure TForm1.btnClearRangeClick(Sender: TObject);
begin
  nxTable2.CancelRange;
end;

procedure TForm1.Button1Click(Sender: TObject);
begin
  nxTable2.FindKey([Edit2.Text]);
end;

procedure TForm1.nxTable1AfterPost(DataSet: TDataSet);
begin
  if nxTable2.State = dsBrowse then
    nxTable2.Refresh;
end;

procedure TForm1.nxTable2AfterPost(DataSet: TDataSet);
begin
  if nxTable1.State = dsBrowse then
    nxTable1.Refresh;
end;

procedure TForm1.bnLoadMemoClick(Sender: TObject);
var
  Stream : TnxBlobStream;
  FS     : TFileStream;
begin
  {load memo into currently selected record:}
  if nxTable1.State = dsBrowse then with OpenDialog1 do
  begin
    if Execute then
    begin
      FS := TFileStream.Create(FileName, fmOpenRead);
      try
        with nxTable1 do begin
          Insert;
          Stream := TnxBlobStream(CreateBlobStream(FieldByName('Memo'), bmReadWrite));
          try
            Stream.CopyFrom(FS, FS.Size);
          finally
            Stream.Free;
          end;
          Post;
        end;
      finally
        FS.Free;
      end;
    end;
  end;
end;


procedure TForm1.Button3Click(Sender: TObject);
begin
  nxTable2.SetRange([Edit3.Text], [Edit3.Text]);
end;

end.
