procedure TFormPrintGuard.p(aFullFileName:string);
var
    fn, oriPath, desPath,  fFullDestFileName,s : string;
    fFullDestDirName : string;
    i, j, wParam, lParam, sSize : integer;
    p : IProcesses;
    bmp : TBitmap ;
    Jpg: TJPEGImage;
    thumb : TBitmap;
    fPDFDocument : TgtExProPDFDocument;
    infofile, sl : TStringList;
    //sa: array[0..255] of char;
    sMD5: string;
    reTry, reTry2 : integer;
    res : boolean;
    Msg : TMsg;
    pmRes : integer;
    fMessageStr  : TStringList;
    fileinfo : TJSONObject;
    fileinfoMaquina : string;
    fileinfIDPrinter : integer;
    fileinfppp : double;
    fileinftotal : double;
    fileinfdatahora : TDateTime;

    procedure cancel;
    var
        j : integer;
    begin
        p := Processes(kTargetExeName);
        for j:=p.ItemCount-1 downto 0 do begin
            wParam := p[j].Session;
            lParam := i;
            reTry := 0;
            repeat sleep(1); inc(reTry);
            until p[j].Windows_.PostMessage( WM_ENDPRINT_MESSAGE, wParam, lParam) or (reTry=5);
           {$IFNDEF NOLOG} GLog.Log(nil,[lcMsgs],'WM_ENDPRINT_MESSAGE');{$ENDIF}
        end;
    end;

    function CancelledByRemote(var msg: TMsg):boolean;
    var
        S: PChar;
        remoteMD5 : string;
    begin
        GetMem(S, msg.LParam+1);
        try
          GlobalGetAtomName(msg.WParam,S, msg.LParam+1);
          remoteMD5 := string(S);
         {$IFNDEF NOLOG}
         GLog.Log(nil,[lcMsgs],'WM_CANCELPRINT_MESSAGE '+remoteMD5 +'/'+sMD5);
         {$ENDIF}
          GlobalDeleteAtom(msg.WParam);
          result := sMD5 = remoteMD5;
        finally
          freeMem(s);               
        end;
    end;

begin
    try

            oriPath := ExtractFilePath(aFullFileName);
            fn      := copy(aFullFileName, length(oriPath)+1, maxint);
            if pos('.nexprint', fn)>0 then
               fn := copy(fn, 1, length(fn)-9);
            desPath := copy(oriPath, 1, pos('\2\', oriPath)-1) + '\3\';
            forcedirectories(desPath);

            if (fileexists (aFullFileName))  and
               (fileexists (aFullFileName+'.json'))  then begin


               sl := TStringList.create;
               sl.LoadFromFile( aFullFileName+'.json');
               fileinfo := TJSONObject.create(sl.text);
               try
                   fileinfoMaquina  := fileinfo.getString('maquina');
                   fileinfIDPrinter := fileinfo.getInt('IDPrinter');
                   fileinfppp       := fileinfo.getDouble('ppp');
                   fileinftotal     := fileinfo.getDouble('total');
                   s                := fileinfo.getString('datahora');  //ddmmyyyyhhnnss
                   fileinfdatahora  := EncodeDateTime(
                                          StrToInt(copy(s,5,4)),
                                          StrToInt(copy(s,3,2)),
                                          StrToInt(copy(s,1,2)),
                                          StrToInt(copy(s,9,2)),
                                          StrToInt(copy(s,11,2)),
                                          StrToInt(copy(s,13,2)),
                                          0);
               finally
                   sl.free;
                   fileinfo.free;
               end;
               {$IFNDEF NOLOG} GLog.Log(nil,[lcTrace],'fileinfdatahora '+s+'/'+formatdatetime('ddmmyyyyhhnnss',fileinfdatahora));{$ENDIF}
               {$IFNDEF NOLOG} GLog.ForceLogWrite;{$ENDIF}


                fFullDestFileName := strUtils.ReplaceStr( desPath+ fn+'.nexprint', '\\', '\');
                fFullDestDirName  := strUtils.ReplaceStr( desPath+ fn+'\', '\\', '\');
                sMD5 := md5.H( formatfloat('000', CurrentProcess.Session) + fFullDestFileName);
                {$IFNDEF NOLOG} GLog.Log(nil,[lcTrace],fFullDestFileName +'/'+sMD5);{$ENDIF}

                if copyfile(pchar(aFullFileName), pchar(fFullDestFileName), false) and
                   copyfile(pchar(aFullFileName+'.json'), pchar(fFullDestFileName+'.json'), false) then begin

                    forcedirectories(fFullDestDirName);
                    fPDFDocument := TgtExProPDFDocument.create(nil);
                    try
                        fPDFDocument.FileName := fFullDestFileName;
                        infofile := TStringList.create;
                        try
                            // processar primeiras 5

                            for i:=1 to fPDFDocument.PageCount do begin
                                if i>5 then break;

                                bmp := fPDFDocument.GetBitmap(i, 100, 100);
                                Jpg := TJPEGImage.Create;
                                thumb := TBitmap.Create;
                                try
                                    Jpg.Assign(Bmp);
                                    jpg.PixelFormat    :=jf24bit;
                                    Jpg.CompressionQuality := 100;
                                    Jpg.ProgressiveDisplay := False;
                                    Jpg.ProgressiveEncoding := False;

                                    thumb.PixelFormat := pf24bit;
                                    thumb.Width  := kThumbWidth;
                                    thumb.Height := trunc( ( bmp.Height/bmp.Width ) * thumb.Width );
                                    thumb.Canvas.StretchDraw(rect(0,0,thumb.Width, thumb.Height), bmp);

                                    if i=1 then begin
                                        infofile.add( 'PageCount='+inttostr(fPDFDocument.PageCount));
                                        infofile.add( 'ThumbWidth='+inttostr(kThumbWidth));
                                        infofile.add( 'ThumbHeight='+inttostr(thumb.Height));
                                        infofile.add( 'BmpWidth='+inttostr(bmp.Width));
                                        infofile.add( 'BmpHeight='+inttostr(bmp.Height));
                                        infofile.add( 'MD5='+sMD5);
                                        infofile.add( 'Session='+inttostr(CurrentProcess.Session));
                                        infofile.SaveToFile(fFullDestDirName+'file.info');
                                    end;

                                    if not directoryExists(fFullDestDirName) then begin
                                        cancel;
                                        exit;
                                    end;

                                finally
                                    thumb.SaveToFile(fFullDestDirName+inttostr(i)+'.bnexprint');
                                    Jpg.SaveToFile(fFullDestDirName+inttostr(i)+'.jnexprint');
                                end;

                                thumb.free;
                                bmp.free;
                                Jpg.free;
                            end;

                            // iniciar manager

                            p := Processes(kTargetExeName);
                            for j:=p.ItemCount-1 downto 0 do begin

                                wParam := GlobalFindAtom(PChar(sMD5));
                                if wParam=0 then
                                    wParam := GlobalAddAtom(PChar(sMD5));
                                sSize  := Length(sMD5);
                                reTry := 0;
                                repeat
                                    sleep(1); inc(reTry);
                                    res := p[j].Windows_.PostMessage( WM_STARTPRINT_MESSAGE, wParam, sSize);
                                    {$IFNDEF NOLOG} GLog.Log(nil,[lcMsgs],'WM_STARTPRINT_MESSAGE');{$ENDIF}
                                    if res then begin
                                        reTry2 := 0;
                                        while reTry2<20 do begin
                                            pmRes := Integer(PeekMessage(Msg, hwnd(0), lParam, wParam, PM_REMOVE));
                                            if pmRes <> 0 then begin

                                                TranslateMessage(Msg);
                                                DispatchMessage(Msg);

                                                case Msg.message of
                                                  WM_STARTRETURN_MESSAGE : begin
                                                      {$IFNDEF NOLOG} GLog.Log(nil,[lcMsgs],'WM_STARTRETURN_MESSAGE');{$ENDIF}
                                                      reTry2 := 1000;
                                                  end;
                                                  WM_CANCELPRINT_MESSAGE :
                                                      if CancelledByRemote(Msg) then
                                                          exit;
                                                end;

                                            end else
                                                sleep(250);
                                            inc(reTry2);
                                        end;
                                    end;
                                until (res) or (reTry=5);

                            end;

                        finally
                           infofile.Free;
                        end;

                        // processar restantes

                        if fPDFDocument.PageCount>5 then
                        for i:=6 to fPDFDocument.PageCount do begin

                            pmRes := Integer(PeekMessage(Msg, hwnd(0), lParam, wParam, PM_REMOVE));
                            if pmRes <> 0 then begin

                                TranslateMessage(Msg);
                                DispatchMessage(Msg);

                                case Msg.message of
                                  WM_CANCELPRINT_MESSAGE : begin
                                      if CancelledByRemote(Msg) then
                                          break;
                                  end;
                                end;

                            end;

                            bmp := fPDFDocument.GetBitmap(i, 100, 100);
                            Jpg := TJPEGImage.Create;
                            thumb := TBitmap.Create;
                            try
                                Jpg.Assign(Bmp);
                                jpg.PixelFormat    :=jf24bit;
                                Jpg.CompressionQuality := 100;
                                Jpg.ProgressiveDisplay := False;
                                Jpg.ProgressiveEncoding := False;

                                thumb.PixelFormat := pf24bit;
                                thumb.Width  := kThumbWidth;
                                thumb.Height := trunc( ( bmp.Height/bmp.Width ) * thumb.Width );
                                thumb.Canvas.StretchDraw(rect(0,0,thumb.Width, thumb.Height), bmp);

                                if not directoryExists(fFullDestDirName) then begin
                                    cancel;
                                    exit;
                                end;

                                thumb.SaveToFile(fFullDestDirName+inttostr(i)+'.bnexprint');
                                Jpg.SaveToFile(fFullDestDirName+inttostr(i)+'.jnexprint');

                            finally
                                thumb.free;
                                bmp.free;
                                Jpg.free;
                            end;

                            p := Processes(kTargetExeName);
                            for j:=p.ItemCount-1 downto 0 do begin
                                fMessageStr  := TStringList.create;
                                try
                                    fMessageStr.add(sMD5);
                                    fMessageStr.add(intToStr(CurrentProcess.Session));
                                    fMessageStr.add(intToStr(i));
                                    wParam := GlobalFindAtom(PChar(fMessageStr.text));
                                    if wParam=0 then begin
                                        wParam := GlobalAddAtom(PChar(fMessageStr.text));
                                        lParam := Length(fMessageStr.text);
                                        reTry := 0;
                                        repeat sleep(1); inc(reTry);
                                        until p[j].Windows_.PostMessage( WM_PROGRESS_MESSAGE, wParam, lParam) or (reTry=5);
                                        {$IFNDEF NOLOG} GLog.Log(nil,[lcMsgs],'WM_PROGRESS_MESSAGE '+inttostr(i));{$ENDIF}
                                    end;
                                finally
                                    fMessageStr.free;
                                end;
                             end;
                        end;

                    finally
                        fPDFDocument.free;
                        deletefile(pchar(aFullFileName));
                        deletefile(pchar(aFullFileName+'.json'));
                    end;
                end;
            end;


    except
      on E:Exception do
          {$IFNDEF NOLOG} GLog.Log(nil,[lcExcept],e.message);{$ENDIF}
    end;
    {$IFNDEF NOLOG} GLog.Log(nil,[lcTrace],'fim');{$ENDIF}
    {$IFNDEF NOLOG} GLog.ForceLogWrite;{$ENDIF}


end;